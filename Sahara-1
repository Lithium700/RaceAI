import pygame
import math
import time

# COLORS
bg = (255, 255, 255)

# WINDOW SETTINGS
pygame.init()
(width, height) = (800, 600)
GD = pygame.display.set_mode((width, height))
pygame.display.set_caption('Race AI')
GD.fill(bg)
clock = pygame.time.Clock()
car_image1 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game donkerblauw.png"), (40, 22))
car_image2 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game rood.png"), (40, 22))
car_image3 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game lichtgroen.png"), (40, 22))
car_image4 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game donkergroen.png"), (40, 22))
car_image5 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game geel.png"), (40, 22))
car_image6 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game oranje.png"), (40, 22)) 
car_image7 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game roze.png"), (40, 22))
car_image8 = pygame.transform.scale(pygame.image.load("H:\PythonApplication3\img/Auto voor game lichtblauw.png"), (40, 22))

racebaan = pygame.image.load("H:\PythonApplication3\img/Racebaan.png")
racebaan = pygame.transform.scale(racebaan, (width, height))  # Schaal de afbeelding naar de grootte van het scherm

KEYS = []
# W - 0, S - 1, A - 3, D - 2

# AI SETTINGS
all_cars = [] 
finish_line_x =220  # De x-positie van de verticale finishlijn
finish_line_start_y = 425  # Begin y-positie van de finishlijn
finish_line_end_y = 495  # Eind y-positie van de finishlijn
bet_on_car = None  # Dit houdt bij op welke auto je wedt


def spawnCars():

    car1 = Car(car_image1, START_POS[0], START_POS[1], 0, [], 0, maxSpeed=3, acceleration=0.3, drag=0.1, turnSpeed=3)
    car2 = Car(car_image2, START_POS[0] + 50, START_POS[1] + 20, 0, [], 0, maxSpeed=4, acceleration=0.4, drag=0.05, turnSpeed=4)
    car3 = Car(car_image3, START_POS[0] + 100, START_POS[1], 0, [], 0, maxSpeed=3, acceleration=0.3, drag=0.1, turnSpeed=3)
    car4 = Car(car_image4, START_POS[0] + 150, START_POS[1] + 20, 0, [], 0, maxSpeed=4, acceleration=0.4, drag=0.05, turnSpeed=4)
    car5 = Car(car_image5, START_POS[0] + 200, START_POS[1], 0, [], 0, maxSpeed=3, acceleration=0.3, drag=0.1, turnSpeed=3)
    car6 = Car(car_image6, START_POS[0] + 250, START_POS[1] + 20, 0, [], 0, maxSpeed=4, acceleration=0.4, drag=0.05, turnSpeed=4)
    car7 = Car(car_image7, START_POS[0] + 300, START_POS[1], 0, [], 0, maxSpeed=3, acceleration=0.3, drag=0.1, turnSpeed=3)
    car8 = Car(car_image8, START_POS[0] + 350, START_POS[1] + 20, 0, [], 0, maxSpeed=4, acceleration=0.4, drag=0.05, turnSpeed=4)
   
    all_cars.append(car1)
    all_cars.append(car2)
    all_cars.append(car3)
    all_cars.append(car4)
    all_cars.append(car5)
    all_cars.append(car6)
    all_cars.append(car7)
    all_cars.append(car8)

class Car():
    def __init__(self, image, x, y, speed, brain, fitness, maxSpeed, acceleration, drag, turnSpeed):
        self.image = image
        self.x = x
        self.y = y
        self.speed = speed
        self.brain = brain
        self.fitness = fitness
        self.angle = 0 
        self.rect = self.image.get_rect(center=(self.x, self.y))  

        self.maxSpeed = maxSpeed
        self.acceleration = acceleration
        self.drag = drag
        self.turnSpeed = turnSpeed

    def move(self):
        if 0 in KEYS: 
            self.speed += self.acceleration
        if 1 in KEYS:  
            self.speed -= self.acceleration

        if self.speed != 0:
            if 3 in KEYS:  
                if self.speed > 0:
                    self.angle += self.turnSpeed  
                else:
                    self.angle -= self.turnSpeed 
           
            if 2 in KEYS:  
                if self.speed > 0:
                    self.angle -= self.turnSpeed 
                else:
                    self.angle += self.turnSpeed  

        # CALC ANGLE
        radians = math.radians(self.angle)
        self.x += self.speed * math.cos(radians)
        self.y += self.speed * math.sin(radians)

        # DRAG
        if self.speed > 0:
            if self.speed > self.maxSpeed:
                self.speed = self.maxSpeed
            self.speed -= self.drag
        elif self.speed < 0:
            if self.speed < -self.maxSpeed:
                self.speed = -self.maxSpeed
            self.speed += self.drag

        # COÃ–RDINATES
        self.rect = self.image.get_rect(center=(self.x, self.y))

    def draw(self):
        # ROTATE SPRITE
        rotated_image = pygame.transform.rotate(self.image, -self.angle)  # Draai tegen de klok in
        rotated_rect = rotated_image.get_rect(center=self.rect.center)  # Zorg dat het draait om het midden
        GD.blit(rotated_image, rotated_rect.topleft)

START_POS = [250, 445]

spawnCars()

running = True
while running:
    GD.fill(bg)
    GD.blit(racebaan, (0, 0))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_w:
                KEYS.append(1)
            if event.key == pygame.K_s:
                KEYS.append(0)
            if event.key == pygame.K_a:
                KEYS.append(3)
            if event.key == pygame.K_d:
                KEYS.append(2)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                KEYS.remove(1)
            if event.key == pygame.K_s:
                KEYS.remove(0)
            if event.key == pygame.K_a:
                KEYS.remove(3)
            if event.key == pygame.K_d:
                KEYS.remove(2)

    for car in all_cars:
        car.draw()
        car.move()
        
    pygame.draw.line(GD, (255, 0, 0), (finish_line_x, finish_line_start_y), (finish_line_x, finish_line_end_y), 5)

    pygame.display.update()
    clock.tick(60)
